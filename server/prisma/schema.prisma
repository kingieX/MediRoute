generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Zone {
  ER
  ICU
  WARD1
  WARD2
  OPD
  LAB
  PHARMACY
  RECEPTION
  THEATER
  CAFETERIA
  ADMIN_OFFICE
  TRIAGE
}

model User {
  id        String   @id @default(cuid())
  name             String         @default("")
  specialty    String? // e.g., "Cardiology", "Emergency Medicine"
  avatarUrl    String?
  email     String   @unique
  password  String
  role      Role     @default(NURSE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone    String?
  bio      String?
  address  String?

  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  currentLocation Zone?

  // Relations
  shifts    Shift[]
  logs      EventLog[]
  availability Availability[]
  PatientAssignment PatientAssignment[]
}

enum Role {
  ADMIN
  DOCTOR
  NURSE
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  capacity  Int
  shiftLength Int     @default(8) // shift length in hours (e.g., 8, 12)
  zone         Zone?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patients  Patient[]
  shifts    Shift[]
}

enum ShiftStatus {
  PENDING
  ASSIGNED
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Shift {
  id           String   @id @default(cuid())
  userId       String
  departmentId String
  startTime    DateTime
  endTime      DateTime
  status       ShiftStatus @default(PENDING)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id])
  department  Department @relation(fields: [departmentId], references: [id])

  PatientAssignment PatientAssignment[]
}

model Availability {
  id           String    @id @default(cuid())
  userId       String
  startTime    DateTime
  endTime      DateTime
  isAvailable  Boolean   @default(true) // True for availability, false for unavailability/leave
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User      @relation(fields: [userId], references: [id])
}

model Patient {
  id           String   @id @default(cuid())
  name         String
  status       PatientStatus @default(WAITING)
  departmentId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department   Department @relation(fields: [departmentId], references: [id])

  PatientAssignment PatientAssignment[]
}

model PatientAssignment {
  id           String    @id @default(cuid())
  patientId    String
  userId       String
  shiftId      String? // Optional relation to the shift it was assigned during
  startTime    DateTime
  endTime      DateTime?
  status       String    @default("IN_PROGRESS") // e.g., "IN_PROGRESS", "COMPLETED"
  createdAt    DateTime  @default(now())

  patient      Patient   @relation(fields: [patientId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  shift        Shift?    @relation(fields: [shiftId], references: [id])
}

enum PatientStatus {
  WAITING
  IN_TREATMENT
  DISCHARGED
}

model Alert {
  id        String   @id @default(cuid())
  type      String
  message   String
  resolved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EventLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  details   String?
  createdAt DateTime @default(now())

  // Relations
  user      User?     @relation(fields: [userId], references: [id])
}
